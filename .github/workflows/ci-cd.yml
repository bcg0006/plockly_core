name: CI/CD Pipeline - Enhanced Quality Gates

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  DJANGO_SETTINGS_MODULE: 'backend.settings'

jobs:
  # Enhanced Backend Testing with Quality Gates
  backend-test:
    name: 🐍 Backend Testing & Quality
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install Python dependencies
        run: |
          cd backend
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage[toml]

      - name: 🔍 Run code quality checks
        run: |
          cd backend
          echo "🔧 Running Black formatter..."
          black . --check --diff
          echo "📚 Running isort..."
          isort . --check-only --diff
          echo "🔍 Running flake8..."
          flake8 . --count --show-source --statistics

      - name: 🧪 Run tests with coverage
        run: |
          cd backend
          python manage.py test --verbosity=2 --parallel
          coverage run --source='.' manage.py test
          coverage report --show-missing
          coverage xml

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

      - name: 🚨 Security scanning
        run: |
          cd backend
          pip install bandit
          bandit -r . -f json -o bandit-report.json || true
          echo "Security scan completed"

      - name: 📋 Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: backend-security-report
          path: backend/bandit-report.json

  # Enhanced Frontend Testing with Quality Gates
  frontend-test:
    name: ⚛️ Frontend Testing & Quality
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install dependencies
        run: |
          cd frontend
          npm ci

      - name: 🔍 Run linting
        run: |
          cd frontend
          npm run lint

      - name: 🧪 Run tests with coverage
        run: |
          cd frontend
          npm run test:ci

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

      - name: 🏗️ Build production bundle
        run: |
          cd frontend
          npm run build

      - name: 📋 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist

  # Enhanced Docker Build Testing
  docker-build:
    name: 🐳 Docker Build & Security
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Build and test backend image
        run: |
          cd backend
          docker build -t backend:test .
          docker run --rm backend:test python manage.py check

      - name: 🐳 Build and test frontend image
        run: |
          cd frontend
          docker build -t frontend:test .
          docker run --rm frontend:test npm run build

      - name: 🔍 Run Trivy vulnerability scanner on backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'backend:test'
          format: 'sarif'
          output: 'trivy-backend-results.sarif'

      - name: 🔍 Run Trivy vulnerability scanner on frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'frontend:test'
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'

      - name: 📋 Upload Trivy scan results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-results
          path: |
            trivy-backend-results.sarif
            trivy-frontend-results.sarif

      - name: 📋 Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-backend-results.sarif'

  # Enhanced Security Scanning
  security-scan:
    name: 🔒 Security & Compliance
    runs-on: ubuntu-latest
    needs: [docker-build]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@v6.4.0
        with:
          project: 'Plockly v2'
          path: '.'
          format: 'HTML'
          out: 'reports'

      - name: 📋 Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: reports/

      - name: 🚨 Check for secrets
        run: |
          pip install detect-secrets
          detect-secrets scan --baseline .secrets.baseline || true

  # Enhanced Staging Deployment
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [security-scan]
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          # Add your staging deployment logic here
          # Example: kubectl apply, docker-compose, etc.

      - name: 🧪 Post-deployment tests
        run: |
          echo "🧪 Running post-deployment tests..."
          # Add health checks and smoke tests

      - name: 📊 Deployment status
        run: |
          echo "✅ Staging deployment completed successfully!"

  # Enhanced Production Deployment
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment: production

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Deploy to production
        run: |
          echo "🚀 Deploying to production environment..."
          # Add your production deployment logic here

      - name: 🧪 Production health checks
        run: |
          echo "🧪 Running production health checks..."
          # Add comprehensive health checks

      - name: 📊 Production deployment status
        run: |
          echo "✅ Production deployment completed successfully!"

  # Enhanced Notification System
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: 📊 Generate deployment report
        run: |
          echo "📊 Generating deployment report..."
          # Add report generation logic

      - name: 📧 Send notifications
        run: |
          echo "📧 Sending deployment notifications..."
          # Add notification logic (Slack, email, etc.)

      - name: 🎯 Update deployment status
        run: |
          echo "🎯 Updating deployment status..."
          # Add status update logic
